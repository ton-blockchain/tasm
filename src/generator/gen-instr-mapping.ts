import {writeFileSync} from "node:fs"
import * as t from "@babel/types"
import generateTs from "@babel/generator"
import {instructionList, pseudoInstructions} from "./instructions"

const main = () => {
    writeFileSync(`${__dirname}/../runtime/instr-mapping-gen.ts`, generate())
}

const generate = (): string => {
    const instructions = instructionList()

    const rangeToTypeConst = t.exportNamedDeclaration(
        t.variableDeclaration("const", [
            t.variableDeclarator(
                t.identifier("rangeToName"),
                t.arrayExpression(
                    instructions.flatMap(([name, opcode]) => {
                        if (pseudoInstructions.has(name)) {
                            return []
                        }
                        return [
                            t.objectExpression([
                                t.objectProperty(t.identifier("min"), t.numericLiteral(opcode.min)),
                                t.objectProperty(t.identifier("max"), t.numericLiteral(opcode.max)),
                                t.objectProperty(t.identifier("name"), t.stringLiteral(name)),
                            ]),
                        ]
                    }),
                ),
            ),
        ]),
    )

    const file = t.file(t.program([rangeToTypeConst]))
    t.addComment(
        file,
        "leading",
        ` AUTOGENERATED, DO NOT EDIT, generated by ../generator/gen-instr-mapping.ts`,
        true,
    )
    return generateTs(file).code
}

main()
